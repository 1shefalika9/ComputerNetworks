//SHEFALIKA GHOSH
//19544
//Program to implement Bellman Ford's algorithm (Distance vector routing)

#include <iostream>
#include <climits>
using namespace std;

struct Edge { 
    int src, dst, weight; 
}; 
  
// A graph is represented as an array of edges and not an adjacency matrix. 
struct Graph { 
    // V = total vertices, E = total edges 
    int V, E; 
    struct Edge* edge; //pointer created which points to the array of edges
}; 
  
//Function to create a graph with V vertices and E edges 
struct Graph* createGraph(int vertices, int edges) 
{ 
    struct Graph* graph = new Graph; 
    graph->V = vertices; 
    graph->E = edges; 
    graph->edge = new Edge[edges]; //creating an array of edges pointed to by 'graph' pointer
    return graph; //returning pointer to Graph structure created
} 

void stp(int parent[]){
	char choice;
	do{
		int dv;
    		cout<<"\n\nEnter a destination vertex: ";
    		cin>>dv;
    		int k = dv;
    		cout<<"\nThe shortest path from source to destination vertex is: ";
    		cout<<k;
        	k = parent[k];
    		while(k!= -1){
        		cout<<"<- "<<k;
        		k = parent[k];
    		}

    	cout<<"\nDo you wish to display the shortest path from source to any other vertex? (y/n): ";
    	cin>>choice;
	}while(choice=='y');

	return;
}

void BFord(struct Graph *arg_graph, int source){
    int tot_vertex = arg_graph->V;
    int tot_edge = arg_graph->E;
    int dist[tot_vertex], p[tot_vertex];

    /*initializing dist[]-(rep. distance of all nodes from source node) 
    as 0 for node 0 and INT_MAX for all other nodes and p[]-(rep. parents of nodes) as -1 for all nodes
    initially*/
    dist[source] = 0;
    p[0] = -1;
    for (int i = 1; i < tot_vertex; ++i){
        dist[i] = INT_MAX;
        p[i] = -1;
    }
	
    /*Step 2: Relax all edges vertex-1 times since a shortest path 
    from source to another node can have at max vertex-1 edges*/
	for (int i = 1; i <= tot_vertex - 1; i++) { 
        for (int j = 0; j < tot_edge; j++) { 
            int u = arg_graph->edge[j].src; 
            int v = arg_graph->edge[j].dst; 
            int w = arg_graph->edge[j].weight; 
            if (dist[u] != INT_MAX && dist[u] + w < dist[v]){ 
                dist[v] = dist[u] + w; 
                p[v] = u;
            }
        } 
    } 
  
    // Step 3: check for negative-weight cycles
    for (int i = 0; i < tot_edge; i++) { 
        int u = arg_graph->edge[i].src; 
        int v = arg_graph->edge[i].dst; 
        int w = arg_graph->edge[i].weight; 
        if (dist[u] != INT_MAX && dist[u] + w < dist[v]) { 
            cout<<"\nGraph contains negative weight cycle"; 
            return; // If negative cycle is detected, return 
        } 
    } 
  
    //print array dist[]
    cout<<"\nVertex   Distance from Source\n"; 
  	for (int i = 0; i < tot_vertex; ++i)
    	cout<<i<<"\t\t"<<dist[i]<<"\n";

    //display shortest path from source to other vertices
    stp(p);

    return; 
}

int main(int argc, char const *argv[])
{
	int vt, edg;
	cout<<"Enter the total no. of vertices in graph: ";
	cin>>vt;
	cout<<"Enter the total no. of edges in graph: ";
	cin>>edg;
	struct Graph* dgraph = createGraph(vt, edg); 

	//entering values(edges) to create directed graph 'dgraph'
	for (int i = 0; i < edg; ++i)
	{
		cout<<"\nFor edge "<<i+1<<", enter the nodes:";
		cout<<"\nSource node: ";
		cin>>dgraph->edge[i].src;
		cout<<"Destination node: ";
		cin>>dgraph->edge[i].dst;
		cout<<"Distance between source and destination nodes: ";
		cin>>dgraph->edge[i].weight;
	}

	cout<<"\nThe source node is being taken as 0";
	BFord(dgraph, 0);

	return 0;
}